# -*- coding: utf-8 -*-
"""Loan_approval_ml_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YsjPLEh1QE3qs-5COO8t4tU1FI8KtTul
"""

! git clone https://github.com/wlifferth/ghw-2023-02

import pandas as pd

df = pd.read_csv('ghw-2023-02/loan_applications.csv')

df.head()

df['race']

for column in df.columns:
  print(column)
  print(df[column].value_counts())
  print()

import matplotlib.pyplot as plt 

plt.rcParams["figure.figsize"] = [14, 5]
plt.title("Distribution of Credit Scores")
plt.hist(df['credit_score'], bins=40)
plt.show()

for race in sorted(df['race'].unique()):
  plt.figure(figsize=(12,2))
  plt.title(race)
  plt.hist(df[df["race"] == race]['credit_score'], bins=40)
  plt.show()

crosstab_result = pd.crosstab(index = df['zipcode'], columns = df['race'])
crosstab_result.plot.bar()

for zipcode in sorted(df['zipcode'].unique()):
  plt.figure(figsize=(12,2))
  plt.title(race)
  plt.hist(df[df["zipcode"] == zipcode]['credit_score'], bins=40)
  plt.show()

import seaborn as sns

plt.title("Credit and Zipcode")
sns.violinplot(data = df, x = 'zipcode', y = 'credit_score')
plt.show()

import seaborn as sns

plt.title("Credit and Race")
sns.violinplot(data = df, x = 'race', y = 'credit_score')
plt.show()

import seaborn as sns

plt.title("Credit and Defaulting")
sns.violinplot(data = df, x = 'will_default', y = 'credit_score')
plt.show()

crosstab_result = pd.crosstab(index = df['will_default'], columns = df['race'])
crosstab_result.plot.bar()

df['is_creditworthy'] = df['will_default'] == False

"""Basic Model Selection and Model Building from Scratch"""

def get_accuracy(predictions, correct_answers):
  return sum(predictions == correct_answers) / len(predictions)

import numpy as np 

correct_answers = np.array([1,1,0,0])
predictions = np.array([1,1,1,0])

get_accuracy(predictions, correct_answers)

def predict(credit_score, threshold):
  return credit_score > threshold

steps = 20
threshold = 300
X = df['credit_score']
y = df['is_creditworthy']
initial_predictions  = predict(X, threshold)
accuracy = get_accuracy(initial_predictions, y)
learning_rate = 50

for i in range(steps):
  original_threshold = threshold
  higher_threshold = threshold + learning_rate 


  higher_threshold_predictions = predict(X, higher_threshold)
  higher_threshold_accuracy = get_accuracy(higher_threshold_predictions, y)
  print(f"If our threshold was {higher_threshold} then our accuracy would be {higher_threshold_accuracy}") 

  if higher_threshold_accuracy > accuracy:
    print("Interesting threshold")
    accuracy = higher_threshold_accuracy
    threshold = higher_threshold 

  if original_threshold == threshold:
    print("Didn't update the threshold: Finishing learning")
    break

"""- Learning rate of 100:
 - Threshold: 600
 - Accuracy: 0.8048

- Learning rate of 50:
 - Threshold: 600
 - Accuracy: 0.8048

- Learning rate of 5:
  - Threshold: 530
  -Accuracy: 0.8117


"""

print(threshold)

predict(700, threshold)